within solarGreenhouseV2.Components;
model CanopyPenmanTranspiringOLD
  "penman simple transpiration, heat transfer included"
  parameter solarGreenhouseV2.greenhouseParameters P;
  parameter solarGreenhouseV2.physicalConstants C;

      /*Modelica.Units.SI.Area effectiveSurfaceArea  "this is the area used when
  calcualting the radiation heat transfer. I think similar to the south wall 
  projection, and top area";*/

  input Interfaces.PAR_Input par_I annotation (Placement(transformation(
          extent={{-76,-32},{-36,8}})));

  input Interfaces.NIR_Input nir_I annotation (Placement(transformation(extent={{-76,32},{-36,
            72}}), iconTransformation(extent={{-76,32},{-36,72}})));

  Real re "the resistance stanghellini air to canopy heat transfer";
  parameter Modelica.Units.SI.Area floorArea = P.floorArea;
  parameter Modelica.Units.SI.Length L = 0.7 "leaf length for re";
  parameter Modelica.Units.SI.Velocity u = 0.0 "wind speed";
  Modelica.Units.SI.HeatFlowRate LE "latent energy";
  Modelica.Units.SI.HeatFlowRate R "radiation, sum of pAR,NIR,and Thermal absorbed/emited";
  Modelica.Units.SI.HeatFlowRate J "heat from or to heat capacitance of plants";
  Modelica.Units.SI.HeatFlowRate H "heat convected from plants to air";

  //Modelica.Units.SI.HeatCapacity Cp "assuming all specific heat comes from water in plants";
  parameter Real Transparency =  P.cropTransparency "how much light gets though. In general this is 
  dependent on incoming light angle and LAI, but I'll treat is as a constant for now
  REPLACE this later with extinction coeficent";
  Real AbsorbtionPAR "from 1-0 , how much incident PAR is absorbed by canopy";
  Real AbsorbtionNIR "from 1-0 , how much incident NIR is absorbed by canopy";

  parameter Modelica.Units.SI.Emissivity  Emissivity =  P.cropEmissivity "FIR emissivity of leaves";
  input Real LAI "leaf area index";
  input Modelica.Units.SI.Mass dryMass "dry mass of all the plants per m2 floor area";

  //Modelica.Units.SI.Mass freshMass "fresh mass of plants per m2 floor area, assuming 75% moisture";
  Modelica.Units.SI.Temperature T;
  //Modelica.Units.SI.Temperature T_air;

  //input Real re "stanghellini resistance for convection";
  //input Real ri "stanghellini internal resistance of water evaporation";
  //Real delta "slope of saturated vapour pressure";
  //Real alpha "1 + (delta/psychrometricConstant) + (ri/re)";
  //Real gamma;
  //Modelica.Units.SI.HeatFlowRate R_incident "light incident on leaves, not worrying about absorbtion";
 // Modelica.Units.SI.PartialPressure dP "vapour pressure deffecit";

  Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_a
    radiationHeatPort annotation (Placement(transformation(extent={{
            -14,62},{6,82}})));
  Modelica.Thermal.HeatTransfer.Interfaces.HeatPort_a airHeatPort
 annotation (Placement(transformation(extent={{34,20},{54,40}})));

  Modelica.Thermal.HeatTransfer.Components.ThermalResistor
    thermalReLE(R=re)
    "thermal energy transfered to air with reistance re and LE"
    annotation (Placement(transformation(extent={{22,56},{42,76}})));
equation
  re = 50; //(1174*L^(0.5)) *  ( L*abs(T - airHeatPort.T)   + 207*u*u) ^(-0.25);

  //TODO, fix these to a fucntion of LAI
  AbsorbtionPAR = 1-P.cropTransparency;
  AbsorbtionNIR = 1-P.cropTransparency;

  //alpha = 1 + (delta/C.psychrometricConstant) + (ri/re);
  //delta = solarGreenhouseV1.Functions.slopeOfSaturatedVapourPressure(T);
  //gamma = C.psychrometricConstant;

  //the par_I and nir_I are defined as light incident on canopy per m2 floor area.
  R = radiationHeatPort.Q_flow + floorArea*par_I*AbsorbtionPAR + floorArea*nir_I*AbsorbtionNIR;
  radiationHeatPort.T = T;
  //R_incident = radiationHeatPort.Q_flow + floorArea*par_I + floorArea*nir_I;

  //freshMass = dryMass/0.15;
  //Cp = floorArea*C.waterSpecificHeatCapacity*freshMass*0.75 "assuming all specific heat comes from water in plants";
  //when the teperature is rising, J is negative, heat is going into warming the leaves
  J = 0;//-1*der(T)*Cp;

  //H is a loss of heat when T is bigger than Tair, but it can go the other way
  H =  -re*(T);   //-floorArea*2*LAI*C.airDensity*C.airSpecificHeatCapacity*( T - airHeatPort.T)/re; //stanghellini1987 3.2
  //airHeatPort.T = T_air;
  //airHeatPort.Q_flow = 8; //H +LE;

  //LE is always negative, positive would be condensation on leaves, which is rare/ impossible/ not considered in model
  LE =  0;// -1e-6*floorArea*C.lambda*( 0.224*R_incident +  12.7*dP*1e3);
    // function of T and other stuff , 3.32 stanghellini1987

  //note the sign convention of R is not the same as stanghellini, her R is my -R
  0 =LE+R+J+H; // delta*R/(gamma*alpha) + J*delta/(gamma*alpha) + ( H/alpha);

  //waterMassPort.MV_flow = -LE/C.lambda;
  //dP = max( 0,  solarGreenhouseV1.Functions.saturatedVapourPressure(T)  - waterMassPort.VP);

  connect(thermalReLE.port_a, radiationHeatPort) annotation (Line(
        points={{22,66},{10,66},{10,72},{-4,72}}, color={191,0,0}));
  connect(thermalReLE.port_b, airHeatPort) annotation (Line(points=
          {{42,66},{46,66},{46,44},{44,44},{44,30}}, color={191,0,0}));
end CanopyPenmanTranspiringOLD;
